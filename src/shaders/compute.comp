#version 450
#extension GL_ARB_separate_shader_objects : enable
#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
layout(set = 2, binding = 0) buffer InputBlades {
    Blade inputBlades[];
};

// 2. Write out the culled blades
layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culledBlades[];
};

// 3. Write the total number of blades remaining
layout(set = 2, binding = 2) buffer IndirectDrawBuffer {
    uint vertexCount;
    uint instanceCount;
    uint firstVertex;
    uint firstInstance;
} drawParams;

void main() {
    uint bladeIndex = gl_GlobalInvocationID.x;
    
    // Only process if within blade count
    if (bladeIndex < 8192) {
        // Get blade data
        Blade currentBlade = inputBlades[bladeIndex];
        
        // TODO: Apply forces on every blade and update the vertices in the buffer
        // TODO: Cull blades that are too far away or not in the camera frustum and write them to the culled blades buffer
        // Note: to do this, you will need to use an atomic operation to read and update drawParams.vertexCount
        // You want to write the visible blades to the buffer without write conflicts between threads
        
        // For now, just copy all blades
        culledBlades[bladeIndex] = currentBlade;
        
        // Increment visible blade counter atomically
        atomicAdd(drawParams.vertexCount, 1);
    }
}